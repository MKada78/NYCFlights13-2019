-- _____________________________________________________________________________________________________________________
-- BEGIN DATA
-- _____________________________________________________________________________________________________________________

SET AUTOCOMMIT = 0;
START TRANSACTION;

-- Connecting to the DB:
USE nycflights13;

-- _____________________________________________________________________________________________________________________
-- LOADING MAIN TABLES
-- _____________________________________________________________________________________________________________________ 

-- Lodaing table flights from a csv file:
TRUNCATE TABLE flights;
LOCK TABLES flights WRITE; -- Lock the table during loading to prevent user access to it.

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/flights.csv"
INTO TABLE flights
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES
( );

SHOW WARNINGS; -- To display possible errors/warnings generated by the last request.
UNLOCK TABLES; -- Release the table lock.

-- Loading table airlines from a csv file:
TRUNCATE TABLE airlines;
LOCK TABLES airlines WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/airlines.csv"
INTO TABLE airlines
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES
( );

SHOW WARNINGS;
UNLOCK TABLES;

-- Loading table planes from a csv file:
TRUNCATE TABLE planes;
LOCK TABLES planes WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/planes.csv"
INTO TABLE planes
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES
();     

SHOW WARNINGS;
UNLOCK TABLES;

-- .....................................................................................................................

-- Loading table airports from a csv file:
TRUNCATE TABLE airports;
LOCK TABLES airports WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/airports.csv"
INTO TABLE airports
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES
( );     

SHOW WARNINGS;
UNLOCK TABLES;

-- Loading table weather from a csv file:
TRUNCATE TABLE weather;
LOCK TABLES weather WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/weather.csv"
INTO TABLE weather
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES
( );     

SHOW WARNINGS;
UNLOCK TABLES;

-- _____________________________________________________________________________________________________________________ 
-- LOADING ADDITIONAL TABLES

-- TABLE PLANE_MODELS :
-- Extracting columns planes.model+engines+seats+speed to a csv file:
SELECT model, engines, seats,speed, type, engine, manufacturer 
    FROM planes GROUP BY model
INTO OUTFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/plane_models.csv" 
FIELDS ENCLOSED BY '' 
TERMINATED BY ',' 
ESCAPED BY '' 
LINES TERMINATED BY '\n';

-- Loading table plane_models from the csv file:
TRUNCATE TABLE plane_models ;
LOCK TABLES plane_models WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/plane_models.csv"
INTO TABLE plane_models
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
( );     

SHOW WARNINGS;
UNLOCK TABLES;

-- Adding primary key to plane_models:
ALTER TABLE plane_models 
    ADD id_model TINYINT UNSIGNED AUTO_INCREMENT 
        PRIMARY KEY FIRST;

-- Updating column planes.model based on the values plane_models.id_model:
UPDATE planes AS a 
    SET a.model = 
        (SELECT id_model FROM plane_models as b WHERE a.model = b.model);

-- Modifying the data type of column planes.model to match column plane_models.id_model (to enable Foreign Key):
ALTER TABLE planes 
    MODIFY model TINYINT UNSIGNED;

-- Deleting columns planes.engines+seats+speed+type+engine+manufacturer that are now in plane_models:
ALTER TABLE planes
    DROP COLUMN engines,
    DROP COLUMN seats,
    DROP COLUMN speed,
    DROP type,
    DROP engine,
    DROP manufacturer; 

-- .....................................................................................................................
-- TABLE MODEL_TYPES:

-- Extracting columns plane_models.type to a csv file:
SELECT DISTINCT type 
    FROM plane_models
INTO OUTFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/model_types.csv" 
FIELDS ENCLOSED BY '' 
TERMINATED BY ',' 
ESCAPED BY '' 
LINES TERMINATED BY '\n';

--  Loading table model_types from the csv file:
TRUNCATE TABLE model_types 
LOCK TABLES model_types WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/model_types.csv"
INTO TABLE model_types
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
( );     

SHOW WARNINGS;
UNLOCK TABLES;

-- Adding primary key to model_types:
ALTER TABLE model_types 
    ADD id_type TINYINT UNSIGNED AUTO_INCREMENT 
        PRIMARY KEY FIRST;

-- Updating column plane_models.type based on the values model_types.id_type:
UPDATE plane_models AS a 
    SET a.type = 
        (SELECT id_type FROM model_types as b WHERE a.type = b.type);

-- Modifying the data type of column plane_models.type to match column model_types.id_type (to enable FK):
ALTER TABLE plane_models 
    MODIFY type TINYINT UNSIGNED;

-- .....................................................................................................................
-- TABLE MODEL_ENGINE :

-- Extracting column plane_models.engine to a csv file:
SELECT DISTINCT engine FROM plane_models
INTO OUTFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/model_engines.csv" 
FIELDS ENCLOSED BY '' 
TERMINATED BY ',' 
ESCAPED BY '' 
LINES TERMINATED BY '\n';

-- Loading table model_engines from the csv file:
TRUNCATE TABLE model_engines;
LOCK TABLES model_engines WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/model_engines.csv"
INTO TABLE model_engines
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
( );     

SHOW WARNINGS;
UNLOCK TABLES;

-- Adding primary key to model_engines:
ALTER TABLE model_engines 
    ADD id_engine TINYINT UNSIGNED AUTO_INCREMENT 
        PRIMARY KEY FIRST;

-- Updating column plane_models.engine based on the values model_engines.id_engine:
UPDATE plane_models AS a 
    SET a.engine = 
        (SELECT id_engine FROM model_engines as b WHERE a.engine = b.engine);

-- Modifying the data of column planes.engine to match column model_engines.id_engine (to enable FK):
ALTER TABLE plane_models 
    MODIFY engine TINYINT UNSIGNED ;

-- .....................................................................................................................
-- TABLE MODEL_MANUFACTURERS :

-- Extracting column plane_models.manufacturer to a csv file:
SELECT DISTINCT manufacturer 
    FROM plane_models
INTO OUTFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/model_manufacturers.csv" 
FIELDS ENCLOSED BY '' 
TERMINATED BY ',' 
ESCAPED BY '' 
LINES TERMINATED BY '\n';

-- Loading table model_manufacturers from a csv file:
TRUNCATE TABLE model_manufacturers;
LOCK TABLES model_manufacturers WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/model_manufacturers.csv"
INTO TABLE model_manufacturers
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
( );     

SHOW WARNINGS;
UNLOCK TABLES;

-- Adding primary key to model_manufacturers:
ALTER TABLE model_manufacturers 
    ADD id_manufacturer TINYINT UNSIGNED AUTO_INCREMENT 
        PRIMARY KEY FIRST;

-- Updating columns plane_models.manufacturer based on the values of column model_manufacturers.id_manufacturer:
UPDATE plane_models AS a 
    SET a.manufacturer = 
        (SELECT b.id_manufacturer FROM model_manufacturers AS b WHERE a.manufacturer = b.manufacturer);

-- Modifying the data type of column planes_model.manufacturer to match column model_manufacturers.id_manufacturer (to enable FK):
ALTER TABLE plane_models 
    MODIFY manufacturer TINYINT UNSIGNED;

-- .....................................................................................................................
-- TABLE TIME_ZONE :

-- Extracting columns airports.tz+dst+tzone to a csv file:
SELECT tzone, tz, dst 
    FROM airports 
        GROUP BY tzone, tzone, dst
INTO OUTFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/time_zone.csv" 
FIELDS ENCLOSED BY '' 
TERMINATED BY ',' 
ESCAPED BY '' 
LINES TERMINATED BY '\n';

-- Loading table time_zone from the csv file:
TRUNCATE TABLE time_zone ;
LOCK TABLES time_zone WRITE;

LOAD DATA LOCAL INFILE "D:/S/SQL/@MyDB/10 Flights/Fichiers CSV/time_zone.csv"
INTO TABLE time_zone
FIELDS TERMINATED BY ',' 
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
( );     

SHOW WARNINGS;
UNLOCK TABLES;

-- Adding primary key to time_zone:
ALTER TABLE time_zone 
    ADD id_tzone TINYINT UNSIGNED AUTO_INCREMENT 
        PRIMARY KEY FIRST ;

-- Adding column airports.timez:
ALTER TABLE airports 
    ADD timez TINYINT UNSIGNED;

-- There are 3 NULL in column airports.tzone:
SELECT COUNT(*)-COUNT(tzone) As tzoneNULL, COUNT(*)-COUNT(tz) As tzNULL, COUNT(*)-COUNT(dst) As dstNULL FROM airports;

-- Updating column planes.timez based on the values of column time_zone.id_tzone (NULL on id_tzone !):
UPDATE airports AS a 
SET a.timez = 
CASE
    WHEN a.tzone IS NOT NULL
    THEN (SELECT b.id_tzone 
         FROM time_zone as b 
         WHERE a.tzone = b.tzone AND a.tz = b.tz AND a.dst = b.dst)
    ELSE (SELECT id_tzone
         FROM time_zone
         WHERE tzone IS NULL)
END ;

-- Modifying the data type of column airports.timez to match column time_zone.id_tzone (to enable FK):
ALTER TABLE airports 
    MODIFY id_tzone TINYINT UNSIGNED;

-- Deleting columns airpots.tzone+tz+dst that are now in time_zone:
ALTER TABLE airports
    DROP COLUMN tzone,
    DROP COLUMN tz,
    DROP COLUMN dst; 


-- _____________________________________________________________________________________________________________________
-- PRIMARY AND FOREIGN KEYS 
-- _____________________________________________________________________________________________________________________

-- Adding primary key to flights:
ALTER TABLE flights 
    ADD id_flight INT UNSIGNED AUTO_INCREMENT 
        PRIMARY KEY FIRST; 
-- .....................................................................................................................

-- Adding primary key to weather :
ALTER TABLE weather 
    ADD PRIMARY KEY (year, month, day, hour, origin) ;

-- Adding FK weather/flight on weather.PK/flight.(year, month, day, hour, origin) ;
-- Before we can do so we need to add 81 distincts records present in flights but not in weather:
-- The following select displays these missing records. 
-- Befre we add an index on fligths to sppeed up requests on weatherPK :
CREATE INDEX ind_flights ON flights (year, month, day, hour, origin);

SELECT DISTINCT year, month, day, hour, origin 
    FROM flights 
        WHERE (year, month, day, hour, origin) 
            NOT IN (SELECT DISTINCT year, month, day, hour, origin FROM weather); 

-- Adding the missing records into weather: 
INSERT INTO weather (year, month, day, hour, origin) 
    SELECT DISTINCT year, month, day, hour, origin FROM flights 
        WHERE (year, month, day, hour, origin) 
            NOT IN (SELECT DISTINCT year, month, day, hour, origin FROM weather); 

-- Adding the FK:
ALTER TABLE flights 
    ADD CONSTRAINT fk_weather 
        FOREIGN KEY (year, month, day, hour, origin) 
            REFERENCES weather(year, month, day, hour, origin) ;
-- .....................................................................................................................

-- Adding FK planes/flights on tailnum :
 -- Before we can do so we need to add 721 distinct flights.tailnum present in flights but not in planes:
 -- The following select displays these missing records : 
SELECT COUNT(DISTINCT tailnum) 
    FROM flights 
        WHERE tailnum NOT IN (SELECT DISTINCT tailnum FROM planes);

-- Adding the missing records into planes: 
INSERT INTO planes (tailnum) 
    SELECT DISTINCT tailnum FROM flights 
        WHERE tailnum 
            NOT IN (SELECT DISTINCT tailnum FROM planes) ;

-- Adding the FK:
ALTER TABLE flights 
    ADD CONSTRAINT fk_fplan_tailnum 
        FOREIGN KEY (tailnum) 
            REFERENCES planes(tailnum);
-- .....................................................................................................................

-- Adding FK airports/flights on airports.faa/flights.origin:
ALTER TABLE flights 
    ADD CONSTRAINT fk_origin 
        FOREIGN KEY (origin) 
            REFERENCES airports(faa);
-- .....................................................................................................................

-- Adding FK airports/flights on airports.faa/flights.dest
-- (7.602 fligthts.dest sont manquants dans airports.faa):
-- Before we can do so we need to add 4 distinct flights.dest present in flights but not in airports:
-- The following select displays these missing records : 
SELECT COUNT(DISTINCT dest) 
    FROM flights 
        WHERE dest NOT IN (SELECT DISTINCT faa FROM airports);

-- Adding the missing flights.dest into airports:
INSERT INTO airports (faa) 
    SELECT DISTINCT dest FROM flights 
        WHERE dest NOT IN (SELECT DISTINCT faa FROM airports);

-- Adding the FK:
ALTER TABLE flights 
    ADD CONSTRAINT fk_fairp_dest 
        FOREIGN KEY (dest) 
            REFERENCES airports(faa);
-- .....................................................................................................................

 -- Ajout de la FK flights/airlines sur carrier/carrier :
ALTER TABLE flights 
    ADD CONSTRAINT fk_fa_carrier 
    FOREIGN KEY (carrier) 
    REFERENCES airlines(carrier) ;
-- .....................................................................................................................   

-- Adding FK airports/weather on airports.faa/weather.origin:
ALTER TABLE weather 
    ADD CONSTRAINT fk_wa_faa 
        FOREIGN KEY (origin) 
            REFERENCES airports(faa);
-- .....................................................................................................................   

-- Adding FK model_manufacturers/plane_models on model_manufacturers.id_manufacturer/plane_models.manufacturer:
ALTER TABLE plane_models 
    ADD CONSTRAINT fk_pmmanuf_manufacturer 
    FOREIGN KEY (manufacturer) 
    REFERENCES model_manufacturers(id_manufacturer) ;
-- .....................................................................................................................   

-- Adding FK plane_models/planes on plane_models.id_model/planes.id_model:
ALTER TABLE planes 
    ADD CONSTRAINT fk_ppmod_model 
        FOREIGN KEY (model) 
            REFERENCES plane_models(id_model);
-- .....................................................................................................................   

-- Adding FK model_types/plane_models on model_types.id_type/plane_models_id_type :
ALTER TABLE plane_models 
    ADD CONSTRAINT fk_pmtyp_type 
    FOREIGN KEY (type) 
    REFERENCES model_types(id_type);
-- .....................................................................................................................   

-- Adding FK model_engines/plane_models on model_engine.engine/plane_models.id_engine:
ALTER TABLE plane_models 
    ADD CONSTRAINT fk_pmeng_engine 
    FOREIGN KEY (engine) 
    REFERENCES model_engines(id_engine);
-- .....................................................................................................................   

-- Adding FK time_zone/airpots on time_zone.id_tzone/airports_timez:
ALTER TABLE airports 
    ADD CONSTRAINT fk_atzon_tzone 
    FOREIGN KEY (timez) 
    REFERENCES time_zone(id_tzone) ;


SET AUTOCOMMIT = 1;

-- _____________________________________________________________________________________________________________________
-- END OF DATA
-- _____________________________________________________________________________________________________________________